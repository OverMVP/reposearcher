// Get nodes

const input = document.querySelector(".custom-input");
const removeBtn = document.querySelector(".b");
const itemsList = document.querySelector(".repos-wrapper");
const inputContainer = document.querySelector(".input-container");
const test = document.querySelector(".listener");
let flag = true;
let counter = 1;

// Debounce

function debounce(fn, t) {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      fn.call(this, ...args);
    }, t);
  };
}

//–í—ã–∑—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–ø-–∞–ø–∞
input.addEventListener("keydown", debounce(getRepos, 400));

// –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
itemsList.addEventListener("click", (e) => {
  if (e.target.className != "b") return;
  let repo = e.target.closest(".repo");
  repo.classList.add("remove");
  setTimeout(() => {
    repo.remove();
    counter--;
  }, 300);
});

//–ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –≤—ã–∑—ã–≤–∞–µ–º renderPopup
async function getRepos(event) {
  const { value } = event.target;
  value.trim();
  if (value === "") {
    return;
  }
  try {
    if (!flag) {
      throw new Error("err");
    }
    const response = await fetch(
      `https://api.github.com/search/repositories?q=${value}`
    );
    const data = await response.json();
    const items = data.items;
    renderPopup(items);
    flag = false;
    return items;
  } catch (e) {
    flag = true;
  }
}

//–†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ø-–∞–ø —Å –ø—è—Ç—å—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
//—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
function renderPopup(items) {
  const arr = items;
  const pop_wrapper = document.createElement("ul");
  pop_wrapper.classList.add("popup-wrapper");
  inputContainer.appendChild(pop_wrapper);

  input.addEventListener("keydown", (e) => {
    pop_wrapper.remove();
  });

  for (let i = 0; i < 5; i++) {
    const item = arr[i];
    if (item) {
      const pop = document.createElement("button");
      pop.classList.add("popup");
      pop.innerHTML = `üìÅ${item.name} | üë§ ${item.owner.login} | ‚≠ê${item.stargazers_count}`;
      pop_wrapper.appendChild(pop);
      pop.addEventListener("click", (e) => {
        addNewRepo(item);
        pop_wrapper.remove();
      });
    }
  }
  flag = true;
}

//–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è + –æ—á–∏—Å—Ç–∫–∞ –∏–Ω–ø—É—Ç–∞
function addNewRepo(item = null) {
  if (counter <= 5) {
    counter++;
    const newRepo = document.createElement("ul");
    newRepo.classList.add("repo");
    itemsList.appendChild(newRepo);
    const liInsideRepo = document.createElement("li");
    newRepo.appendChild(liInsideRepo);
    const newDiv = document.createElement("div");
    newDiv.classList.add("li-info");
    liInsideRepo.appendChild(newDiv);
    const newBtnWrapper = document.createElement("div");
    newBtnWrapper.classList.add("btn-wrapper");
    liInsideRepo.appendChild(newBtnWrapper);
    const newRemoveBtn = document.createElement("button");
    newRemoveBtn.classList.add("b");
    newBtnWrapper.appendChild(newRemoveBtn);
    newRemoveBtn.innerText = "X";
    newDiv.insertAdjacentHTML(
      "beforeend",
      `
  <div>Repo: ${item.name}</div>
  <div>User: ${item.owner.login}</div>
  <div>Stars: ${item.stargazers_count} ‚≠ê</div>
  `
    );
  } else {
    alert("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤!");
  }
  input.value = "";
  flag = true;
}
